;; *****************************************************
;; File: macros.mac
;; Authors: Elberth Adrian Garro Sanchez [2014088081]
;; Utility: Simple Macros for NASM
;; Built with NASM Linux 64 bits
;; Copyright 2016 TEC
;; *****************************************************

%ifndef MACROS_MAC
    %define MACROS_MAC
    ;;
    ;; write: show on display a buffer
    ;; params: %1 is the buffer adress which store the output
    ;;         %2 is the length of the output
    ;;
	%macro write 2
		;; sys_write syscall
		mov rax, 1
		;; file descritor, standard output
		mov rdi, 1
		;; buffer address
		mov rsi, %1
		;; length of buffer
		mov rdx, %2
		;; call write syscall
		syscall
	%endmacro
    ;;
    ;; read: saves an input in a buffer
    ;; params: %1 is the buffer adress which will save the input
    ;;         %2 is the length of the input
    ;;
	%macro read 2
		;; sys_read syscall
		mov rax, 0
		;; file descritor, standard input
		mov rdi, 0
		;; buffer address
		mov rsi, %1
		;; length of buffer
		mov rdx, %2
		;; call read syscall
		syscall
	%endmacro
    ;;
    ;; if, else, endif: high level control structures for NASM
    ;; params: %1 it is the condition to evaluate after cmp instruction
    ;;
	%macro if 1
		%push if
	    j%-1  %$ifnot
	%endmacro
	%macro else 0
		%ifctx if
	    	%repl else
	        jmp %$ifend
	        %$ifnot:
		%else
	    	%error  "expected `if' before `else'"
		%endif
	%endmacro
	%macro endif 0
		%ifctx if
	    	%$ifnot:
	        %pop
		%elifctx else
	        %$ifend:
	        %pop
		%else
	    	%error  "expected `if' or `else' before `endif'"
		%endif
	%endmacro
    ;;
    ;; copy_buffer: copy a buffer into another buffer
    ;; Params: %1 is the original buffer address
    ;;         %2 is the buffer address to store the copy of the original
    ;;
	%macro copy_buffer 2
		;; for (int i=0; i<MAX_FILE_SZ; ++i)
		%assign i 0
		%rep MAX_FILE_SZ
			mov dl, byte[%1+i]
			mov byte[%2+i], dl
		%assign i i+1
		%endrep
	%endmacro
    ;;
    ;; clean_buffer: clean buffer with null chars
    ;; Params: %1 is the buffer address
    ;;
    %macro clean_buffer 1
        ;; for (int i=0; i<MAX_FILE_SZ; ++i)
        %assign i 0
        %rep MAX_FILE_SZ
            mov byte[%1+i], 0
        %assign i i+1
        %endrep
    %endmacro
    ;;
    ;; equal_buffers: check if buffers content are equal
    ;; Params: %1 is the first buffer address to compare
    ;;         %2 is the second buffer address to compare
    ;;         %3 register that will know if buffer 1 and buffer 2 are equal
    ;;
    %macro equal_buffers 3
        ;; assume that buffers are equal
        mov %3, 1
        ;; for (int i=0; i<MAX_FILE_SZ; ++i)
        %assign i 0
        %rep MAX_FILE_SZ
            mov dl, byte[%1+i]
            cmp byte[%2+i], dl
            if ne
                mov %3, 0
            endif
        %assign i i+1
        %endrep
    %endmacro
    ;;
    ;; to_lower: converts uppercase buffer's chars into lowercase
    ;; params: %1 is the buffer that will be transformed
    ;;
	%macro to_lower 1
		;; for (int i=0; i<MAX_FILE_SZ; ++i)
		%assign i 0
		%rep MAX_FILE_SZ
			;; test the byte on buffer against 'A'
			;; if char < 'A'
			cmp byte [%1+i], 'A'
			if b
				nop
			else
				;; test the byte on buffer against 'Z'
				;; if char > 'Z'
				cmp byte [%1+i], 'Z'
				if a
					nop
				else
					;; convert to lowercase if 'A' <= char <= 'Z'
					add byte [%1+i], 20h
				endif
			endif
		%assign i i+1
		%endrep
	%endmacro
    ;;
    ;; exit: program ends successfully
    ;; params: does not have
    ;;
	%macro exit 0
		;; sys_exit syscall
		mov	rax, 60
		;; exit code
		mov	rdi, 0
		;; call sys_exit
		syscall
	%endmacro
%endif
